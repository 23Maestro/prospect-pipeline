╔════════════════════════════════════════════════════════════════════════════╗
║                    🎯 SSE Integration Architecture                         ║
╚════════════════════════════════════════════════════════════════════════════╝

BEFORE (Current Setup - stdout issues):
┌──────────────────────────────────────────────────────────────────────────┐
│                                                                          │
│  Raycast Extension                                                       │
│  (assign-videoteam-inbox.tsx)                                           │
│         │                                                                │
│         │ MCP / Direct Call                                             │
│         ▼                                                                │
│  Python Script                                                           │
│  (npid_automator_complete.py)                                           │
│         │                                                                │
│         │ print() / logging → stdout                                    │
│         ▼                                                                │
│  ❌ PROBLEM: Logs disappear, buffers overflow, errors truncated         │
│                                                                          │
└──────────────────────────────────────────────────────────────────────────┘

AFTER (New SSE Setup - clean streaming):
┌──────────────────────────────────────────────────────────────────────────┐
│                                                                          │
│  Raycast Extension                                                       │
│  (assign-videoteam-inbox.tsx)                                           │
│         │                                                                │
│         │ HTTP Request                                                   │
│         ▼                                                                │
│  ┌────────────────────────────────────────────────────────────┐        │
│  │ SSE Streaming Server (session_stream_server.py)            │        │
│  │ Port 5050                                                   │        │
│  │                                                             │        │
│  │  Endpoints:                                                 │        │
│  │  • GET /api/inbox/threads?limit=50                         │        │
│  │  • POST /api/message/assign                                │        │
│  │  • POST /api/session/init                                  │        │
│  │                                                             │        │
│  │  Streams events like:                                       │        │
│  │  ✓ {"type": "status", "data": {"message": "Loading..."}}  │        │
│  │  ✓ {"type": "thread", "data": {...}}                       │        │
│  │  ✓ {"type": "operation_complete", "data": {...}}           │        │
│  └─────────────────────┬──────────────────────────────────────┘        │
│                        │                                                 │
│                        │ Calls methods                                   │
│                        ▼                                                 │
│  ┌────────────────────────────────────────────────────────────┐        │
│  │ NPID Automator (npid_automator_complete.py)               │        │
│  │                                                             │        │
│  │  • get_inbox_threads(limit)                                │        │
│  │  • assign_message(id, owner)                               │        │
│  │  • Other automation methods...                             │        │
│  └─────────────────────┬──────────────────────────────────────┘        │
│                        │                                                 │
│                        │ Uses                                            │
│                        ▼                                                 │
│  ┌────────────────────────────────────────────────────────────┐        │
│  │ Session Manager (session_manager.py)                       │        │
│  │                                                             │        │
│  │  • Selenium WebDriver                                       │        │
│  │  • Persistent browser sessions                              │        │
│  │  • Cookie/state management                                  │        │
│  └────────────────────────────────────────────────────────────┘        │
│                                                                          │
│  ✅ SOLUTION: All logs stream over HTTP, nothing gets lost!            │
│                                                                          │
└──────────────────────────────────────────────────────────────────────────┘


╔════════════════════════════════════════════════════════════════════════════╗
║                        💡 How Your Command Works Now                       ║
╚════════════════════════════════════════════════════════════════════════════╝

1. User runs "Assign Video Team Inbox" in Raycast

2. Raycast makes HTTP request to SSE server:
   GET http://127.0.0.1:5050/api/inbox/threads?limit=50

3. SSE Server receives request and streams back events:

   Event 1: {"type": "operation_start", "data": {"operation": "get_inbox_threads"}}
   Event 2: {"type": "status", "data": {"message": "Initializing..."}}
   Event 3: {"type": "status", "data": {"message": "Fetching inbox..."}}
   Event 4: {"type": "thread", "data": {"index": 1, "thread": {...}}}
   Event 5: {"type": "thread", "data": {"index": 2, "thread": {...}}}
   Event 6: {"type": "operation_complete", "data": {"total_threads": 50}}

4. Raycast collects all thread events and displays them

5. User can now assign messages!


╔════════════════════════════════════════════════════════════════════════════╗
║                          🔧 What You Need to Change                        ║
╚════════════════════════════════════════════════════════════════════════════╝

In src/lib/npid-mcp-adapter.ts:

OLD:
  const messages = await callPythonServer('get_inbox_threads', { limit: 50 });

NEW:
  import { getInboxThreadsViaSSE } from './npid-mcp-adapter';
  const messages = await getInboxThreadsViaSSE(50);

That's it! One function change.


╔════════════════════════════════════════════════════════════════════════════╗
║                              🚀 Quick Start                                ║
╚════════════════════════════════════════════════════════════════════════════╝

Terminal 1 - Start SSE Server:
  cd ~/Raycast/prospect-pipeline/mcp-servers/npid-native
  ./start_sse_server.sh

Terminal 2 - Test It:
  python3 test_sse_client.py

Browser - Monitor It:
  open test_sse_monitor.html

Raycast - Use It:
  Update npid-mcp-adapter.ts and rebuild extension


╔════════════════════════════════════════════════════════════════════════════╗
║                            ✨ Key Benefits                                 ║
╚════════════════════════════════════════════════════════════════════════════╝

✅ No stdout/stderr issues          Every message gets through
✅ Real-time progress updates       See what's happening
✅ Browser debugging                 View events in HTML monitor
✅ Clean error messages              Full tracebacks, no truncation
✅ Multiple clients                  Browser + Raycast + CLI all work
✅ Structured data                   JSON events, not text logs
✅ Easy to extend                    Add new endpoints anytime

The SSE server is just a thin HTTP wrapper around your existing Python code!
