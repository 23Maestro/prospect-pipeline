╔══════════════════════════════════════════════════════════════════╗
║         🚀 NPID SSE STREAMING SERVER - QUICK REFERENCE          ║
╚══════════════════════════════════════════════════════════════════╝

📍 SERVER STATUS: ✅ RUNNING on http://127.0.0.1:5050

┌──────────────────────────────────────────────────────────────────┐
│ 🎯 QUICK START                                                   │
└──────────────────────────────────────────────────────────────────┘

Start Server:
  cd ~/Raycast/prospect-pipeline/mcp-servers/npid-native
  ./start_sse_server.sh

Test It:
  python3 test_sse_client.py
  open test_sse_monitor.html
  curl -N http://127.0.0.1:5050/stream

┌──────────────────────────────────────────────────────────────────┐
│ 🔌 ENDPOINTS                                                     │
└──────────────────────────────────────────────────────────────────┘

✓ GET  /health                        # Check if server is alive
✓ GET  /stream                        # Main SSE stream
✓ GET  /api/inbox/threads?limit=50    # Fetch inbox (streaming)
✓ POST /api/session/init              # Initialize session
✓ GET  /api/session/status            # Session status

┌──────────────────────────────────────────────────────────────────┐
│ 📊 EVENT TYPES                                                   │
└──────────────────────────────────────────────────────────────────┘

• connected           → Initial connection established
• heartbeat           → Keep-alive (every 30s)
• operation_start     → Operation beginning
• status              → Status update message
• thread              → Inbox thread data
• operation_complete  → Operation finished
• error               → Error occurred

┌──────────────────────────────────────────────────────────────────┐
│ 💻 INTEGRATION EXAMPLES                                          │
└──────────────────────────────────────────────────────────────────┘

JavaScript:
  const es = new EventSource('http://127.0.0.1:5050/stream');
  es.onmessage = e => console.log(JSON.parse(e.data));

Python:
  import requests, json
  with requests.get('http://127.0.0.1:5050/stream', stream=True) as r:
      for line in r.iter_lines():
          if line.startswith(b'data: '):
              print(json.loads(line[6:]))

curl:
  curl -N http://127.0.0.1:5050/stream

Raycast MCP:
  Point to: http://127.0.0.1:5050/stream

┌──────────────────────────────────────────────────────────────────┐
│ 🛠️ TROUBLESHOOTING                                              │
└──────────────────────────────────────────────────────────────────┘

Port in use?
  lsof -ti:5050 | xargs kill -9

Check health:
  curl http://127.0.0.1:5050/health

View logs:
  (Check terminal where server is running)

Restart server:
  ./start_sse_server.sh

┌──────────────────────────────────────────────────────────────────┐
│ 📁 FILES                                                         │
└──────────────────────────────────────────────────────────────────┘

session_stream_server.py    → Main SSE server
test_sse_client.py          → Python test client
test_sse_monitor.html       → Browser monitor
start_sse_server.sh         → Quick start script
SSE_README.md               → Full documentation
IMPLEMENTATION_COMPLETE.md  → Implementation summary

┌──────────────────────────────────────────────────────────────────┐
│ ✨ WHY SSE > stdout?                                            │
└──────────────────────────────────────────────────────────────────┘

❌ stdout: Buffering, truncation, broken pipes, no structure
✅ SSE:    Reliable, browser-viewable, JSON events, real-time

╔══════════════════════════════════════════════════════════════════╗
║  🎉 PROBLEM SOLVED: No more stdout/stderr issues!               ║
╚══════════════════════════════════════════════════════════════════╝
